/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package spateaugur_plugin_editor;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.*;
import java.util.*;
import javax.swing.JOptionPane;
import java.sql.*;

/**
 *
 * @author Sagar Palo
 */
public class MainEditor extends javax.swing.JFrame {

    /**
     * Creates new form MainEditor
     */
    
    String data = new String();
    public static final String FILENAME = "E:/SpateAugur_Configuration/configuration_file.txt";
    public static final String DOMAIN = "http://127.0.0.1:5001/hospitaldata";
    public static final String IP = "127.0.0.1:5001";
    
    public MainEditor() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbdbserver = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txtip = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtdbport = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtusrid = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtpass = new javax.swing.JTextField();
        btnset = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txthospital = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtloc = new javax.swing.JTextField();
        txtdbname = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Edit Configuration");
        setBackground(new java.awt.Color(255, 255, 255));
        setType(java.awt.Window.Type.POPUP);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(232, 49, 81));
        jLabel1.setText("Edit Configuration");

        jLabel2.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel2.setText("Type of Database System Used");

        cmbdbserver.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        cmbdbserver.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Microsoft SQL Server", "Oracle Server", "MySQL Server", "MS Access" }));

        jLabel3.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel3.setText("Database Server IP");

        txtip.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel4.setText("Database Server Port Number");

        txtdbport.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel5.setText("Database Name");

        jLabel6.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel6.setText("User ID");

        txtusrid.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel7.setText("Password");

        txtpass.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

        btnset.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        btnset.setText("Test Connection & Edit Configuration");
        btnset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsetActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel8.setText("Hospital Name");

        txthospital.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel9.setText("Hospital Locality");

        txtloc.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

        txtdbname.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N

        jButton1.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jButton2.setText("Push");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnset))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtpass)
                            .addComponent(txtdbname)
                            .addComponent(cmbdbserver, 0, 276, Short.MAX_VALUE)
                            .addComponent(txtip)
                            .addComponent(txtdbport)
                            .addComponent(txtusrid)
                            .addComponent(txtloc)
                            .addComponent(txthospital))))
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txthospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtloc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(cmbdbserver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtdbport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtdbname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtusrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(txtpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnset)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        
        
        try{
            File file = new File(FILENAME);
            
            StringBuilder fileContents = new StringBuilder((int)file.length());
            Scanner scanner = new Scanner(file);
            String lineSeparator = System.getProperty("line.separator");
            
            try {
                while(scanner.hasNextLine()) {
                    fileContents.append(scanner.nextLine());
                }
                data = fileContents.toString();
            } finally {
                scanner.close();
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }

        System.out.println(data);
        String[] data2 = data.split(",");
        
        if(data2.length == 8){
            System.out.println(data2[7]);
            txthospital.setText(data2[0]);
            txtloc.setText(data2[1]);
            txtip.setText(data2[3]);
            txtdbname.setText(data2[5]);
            txtdbport.setText(data2[4]);
            txtusrid.setText(data2[6]);
            txtpass.setText(data2[7]);
            cmbdbserver.setSelectedIndex(Integer.parseInt(data2[2]));
            System.out.println("done");
        }
        else if(data2.length == 7){
            
            txthospital.setText(data2[0]);
            txtloc.setText(data2[1]);
            txtip.setText(data2[3]);
            txtdbname.setText(data2[5]);
            txtdbport.setText(data2[4]);
            txtusrid.setText(data2[6]);
            cmbdbserver.setSelectedIndex(Integer.parseInt(data2[2]));
            System.out.println("done");
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsetActionPerformed
        // TODO add your handling code here:
        String hospital = txthospital.getText();
        String locality = txtloc.getText();
        String ip = txtip.getText();
        String dbname = txtdbname.getText();
        String port = txtdbport.getText();
        String usrid = txtusrid.getText();
        String pass = txtpass.getText();
        int index = cmbdbserver.getSelectedIndex();
        if( hospital.equals("") || locality.equals("") || ip.equals("") || dbname.equals("") || port.equals("") || usrid.equals("") ){
            JOptionPane.showMessageDialog(null, "Insufficient Data, Please add all fields.", "Insufficient Data", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            
            String USER = usrid;
            String PASS = pass;
            Connection conn = null;
          
            switch(index){
                case 0:
                    break;
                case 1:
                    break;
                case 2:
                    try {
                        String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
                        String DB_URL = "jdbc:mysql://"+ip+":"+port+"/"+dbname;
                        Class.forName(JDBC_DRIVER);
                        System.out.println("Connecting to a selected database...");
                        conn = DriverManager.getConnection(DB_URL, USER, PASS);
                        System.out.println("Connected database successfully...");
                        JOptionPane.showMessageDialog(null, "Connection Tested", "Success", JOptionPane.INFORMATION_MESSAGE);
                        
                        try{
                            File file = new File(FILENAME);
                            String content = "";
                            
                            content = hospital+","+locality+","+index+","+ip+","+port+","+dbname+","+usrid+","+pass+"\n";                                    
   
                            PrintWriter writer = new PrintWriter(FILENAME, "UTF-8");                            
                            writer.println(content);                         
                            writer.close();
                            System.out.println(content);

                        }
                        catch(Exception e){
                            e.printStackTrace();
                        }

                        System.exit(0);
                        
                    }
                    catch (SQLException ex) {
                        // handle any errors
                        System.out.println("SQLException: " + ex.getMessage());
                        System.out.println("SQLState: " + ex.getSQLState());
                        System.out.println("VendorError: " + ex.getErrorCode());
                        JOptionPane.showMessageDialog(null, "Connection Failed. Ensure all parameters are correcetd", "Failure", JOptionPane.WARNING_MESSAGE);
                        
                    }
                    catch(ClassNotFoundException ex){
                        System.out.println(ex.getMessage());
                        JOptionPane.showMessageDialog(null, "Connection Failed. Ensure all parameters are correct", "Failure", JOptionPane.WARNING_MESSAGE);                 
                    }
                    break;
                case 3:
                    try
                    {
                        //Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        String database = "jdbc:ucanaccess://E:/Hospitaldatabase/hospitaldata.accdb";
                        conn = DriverManager.getConnection(database);                         
                        System.out.println("Connected database successfully...");
                        JOptionPane.showMessageDialog(null, "Connection Tested", "Success", JOptionPane.INFORMATION_MESSAGE);          
                        try{
                            File file = new File(FILENAME);
                            String content = "";
                            
                            content = hospital+","+locality+","+index+","+ip+","+port+","+dbname+","+usrid+","+pass+"\n";                                    
   
                            PrintWriter writer = new PrintWriter(FILENAME, "UTF-8");                            
                            writer.println(content);                         
                            writer.close();
                            System.out.println(content);

                        }
                        catch(Exception e){
                            e.printStackTrace();
                        }

                        System.exit(0);
                        conn.close();
                    }
                    catch (SQLException ex) {
                        // handle any errors
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Connection Failed. Ensure all parameters are correcetd", "Failure", JOptionPane.WARNING_MESSAGE);
                        
                    }
                    
                    break;
                          
            }
            
        }
        
    }//GEN-LAST:event_btnsetActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        try{
            File file = new File(FILENAME);

            StringBuilder fileContents = new StringBuilder((int)file.length());
            Scanner scanner = new Scanner(file);
            String lineSeparator = System.getProperty("line.separator");

            try {
                while(scanner.hasNextLine()) {
                    fileContents.append(scanner.nextLine());
                }
                data = fileContents.toString();
            } finally {
                scanner.close();
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
        System.out.println(data);
        String[] data2 = data.split(",");
        //System.out.println(data2[7]);
        String hospital="", locality="", ip="", dbname="", port="", usrid="", pass = "";
        int index=2;
        System.out.println(data2.length);
        if(data2.length == 8){
            hospital=data2[0];
            locality=data2[1];
            ip=data2[3];
            dbname=data2[5];
            port=data2[4];
            usrid=data2[6];
            pass = data2[7];
            index=Integer.parseInt(data2[2]);
        }
        else if(data2.length == 7){
            hospital=data2[0];
            locality=data2[1];
            ip=data2[3];
            dbname=data2[5];
            port=data2[4];
            usrid=data2[6];
            pass = "";
            index=Integer.parseInt(data2[2]);
        }

        String USER = usrid;
        String PASS = pass;
        Connection conn = null;
        System.out.println(pass);
        switch(index){
            case 0:
            break;
            case 1:
            break;
            case 2:
            try {

                int[] disease_cnt = {0,0,0,0,0,0,0,0,0,0};
                String[] disease = {"MALARIA","DENGUE","CHICKENGUNIA","VIRAL_FEVER","FLU","TUBERCULOSIS","DIARROHEA","TYPHOID","CHOLERA","JAUNDICE"};
                String JDBC_DRIVER = "com.mysql.jdbc.Driver";
                String DB_URL = "jdbc:mysql://"+ip+":"+port+"/"+dbname;
                Class.forName(JDBC_DRIVER);
                System.out.println("Connecting to a selected database...");
                conn = DriverManager.getConnection(DB_URL, USER, PASS);
                System.out.println("Connected database successfully...");

                PreparedStatement s = conn.prepareStatement("select disease, count(*) from patient_data where s_d = ? and s_m = ? and s_y = ? group by disease;");
                java.util.Date d = new java.util.Date((new java.util.Date().getTime() - 24*3600*1000));
                System.out.println((d.getYear()+1900) + " " + d.getDate() + " " + (d.getMonth() + 1));
                s.setInt(1, d.getDate());
                s.setInt(2, d.getMonth() + 1);
                s.setInt(3, d.getYear() + 1900);
                ResultSet r = s.executeQuery();

                while(r.next()){
                    System.out.println(r.getString(1) + " " + r.getString(2));
                    if(r.getString(1).equalsIgnoreCase("MALARIA")){
                        disease_cnt[0] = Integer.parseInt(r.getString(2));
                    }else if(r.getString(1).equalsIgnoreCase("DENGUE")){
                        disease_cnt[1] = Integer.parseInt(r.getString(2));
                    }else if(r.getString(1).equalsIgnoreCase("CHICKENGUNIA")){
                        disease_cnt[2] = Integer.parseInt(r.getString(2));
                    }else if(r.getString(1).equalsIgnoreCase("VIRAL_FEVER")){
                        disease_cnt[3] = Integer.parseInt(r.getString(2));
                    }else if(r.getString(1).equalsIgnoreCase("FLU")){
                        disease_cnt[4] = Integer.parseInt(r.getString(2));
                    }else if(r.getString(1).equalsIgnoreCase("TUBERCULOSIS")){
                        disease_cnt[5] = Integer.parseInt(r.getString(2));
                    }else if(r.getString(1).equalsIgnoreCase("DIARROHEA")){
                        disease_cnt[6] = Integer.parseInt(r.getString(2));
                    }else if(r.getString(1).equalsIgnoreCase("TYPHOID")){
                        disease_cnt[7] = Integer.parseInt(r.getString(2));
                    }else if(r.getString(1).equalsIgnoreCase("CHOLERA")){
                        disease_cnt[8] = Integer.parseInt(r.getString(2));
                    }else if(r.getString(1).equalsIgnoreCase("JAUNDICE")){
                        disease_cnt[9] = Integer.parseInt(r.getString(2));
                    }
                }

                
                Map<String,Object> params = new LinkedHashMap<>();
                params.put("LOCATION",locality );
                params.put("S_D", String.valueOf(d.getDate()));
                params.put("S_M", String.valueOf(d.getMonth() + 1));
                params.put("MALARIA", String.valueOf(disease_cnt[0]));
                params.put("DENGUE", String.valueOf(disease_cnt[1]));
                params.put("CHICKENGUNIA", String.valueOf(disease_cnt[2]));
                params.put("VIRAL_FEVER", String.valueOf(disease_cnt[3]));
                params.put("FLU", String.valueOf(disease_cnt[4]));
                params.put("TUBERCULOSIS", String.valueOf(disease_cnt[5]));
                params.put("DIARROHEA", String.valueOf(disease_cnt[6]));
                params.put("TYPHOID", String.valueOf(disease_cnt[7]));
                params.put("CHOLERA", String.valueOf(disease_cnt[8]));
                params.put("JAUNDICE", String.valueOf(disease_cnt[9]));

                URL url = new URL(DOMAIN);                            
                StringBuilder postData = new StringBuilder();
                for (Map.Entry<String,Object> param : params.entrySet()) {
                    if (postData.length() != 0) postData.append('&');
                    postData.append(URLEncoder.encode(param.getKey(), "UTF-8"));
                    postData.append('=');
                    postData.append(URLEncoder.encode(String.valueOf(param.getValue()), "UTF-8"));
                }
                byte[] postDataBytes = postData.toString().getBytes("UTF-8");

                HttpURLConnection connection = (HttpURLConnection)url.openConnection();
                connection.setRequestMethod("POST");
                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
                connection.setRequestProperty("Content-Length", String.valueOf(postDataBytes.length));
                connection.setDoOutput(true);
                connection.getOutputStream().write(postDataBytes);

                Reader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));

                for (int c; (c = in.read()) >= 0;)
                    System.out.print((char)c);
                
                }
                catch (SQLException ex) {
                    // handle any errors
                    System.out.println("SQLException: " + ex.getMessage());
                    System.out.println("SQLState: " + ex.getSQLState());
                    System.out.println("VendorError: " + ex.getErrorCode());
                }
                catch(ClassNotFoundException ex){
                    System.out.println(ex.getMessage());
                }
                catch(Exception e){
                    e.printStackTrace();
                }
                break;
                case 3:
                    System.out.println("here");
                    try{
                    int[] disease_cnt = {0,0,0,0,0,0,0,0,0,0};
                    String[] disease = {"MALARIA","DENGUE","CHICKENGUNIA","VIRAL_FEVER","FLU","TUBERCULOSIS","DIARROHEA","TYPHOID","CHOLERA","JAUNDICE"};
                    String database = "jdbc:ucanaccess://E:/Hospitaldatabase/hospitaldata.accdb";
                    Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
                    conn = DriverManager.getConnection(database); 
                    System.out.println("Connected database successfully...");

                    PreparedStatement s = conn.prepareStatement("select disease, count(*) from patient_data where s_d = ? and s_m = ? and s_y = ? group by disease;");
                    java.util.Date d = new java.util.Date((new java.util.Date().getTime() - 24*3600*1000));
                    System.out.println((d.getYear()+1900) + " " + d.getDate() + " " + (d.getMonth() + 1));
                    s.setInt(1, d.getDate());
                    s.setInt(2, d.getMonth() + 1);
                    s.setInt(3, d.getYear() + 1900);
                    ResultSet r = s.executeQuery();

                    while(r.next()){
                        System.out.println(r.getString(1) + " " + r.getString(2));
                        if(r.getString(1).equalsIgnoreCase("MALARIA")){
                            disease_cnt[0] = Integer.parseInt(r.getString(2));
                        }else if(r.getString(1).equalsIgnoreCase("DENGUE")){
                            disease_cnt[1] = Integer.parseInt(r.getString(2));
                        }else if(r.getString(1).equalsIgnoreCase("CHICKENGUNIA")){
                            disease_cnt[2] = Integer.parseInt(r.getString(2));
                        }else if(r.getString(1).equalsIgnoreCase("VIRAL_FEVER")){
                            disease_cnt[3] = Integer.parseInt(r.getString(2));
                        }else if(r.getString(1).equalsIgnoreCase("FLU")){
                            disease_cnt[4] = Integer.parseInt(r.getString(2));
                        }else if(r.getString(1).equalsIgnoreCase("TUBERCULOSIS")){
                            disease_cnt[5] = Integer.parseInt(r.getString(2));
                        }else if(r.getString(1).equalsIgnoreCase("DIARROHEA")){
                            disease_cnt[6] = Integer.parseInt(r.getString(2));
                        }else if(r.getString(1).equalsIgnoreCase("TYPHOID")){
                            disease_cnt[7] = Integer.parseInt(r.getString(2));
                        }else if(r.getString(1).equalsIgnoreCase("CHOLERA")){
                            disease_cnt[8] = Integer.parseInt(r.getString(2));
                        }else if(r.getString(1).equalsIgnoreCase("JAUNDICE")){
                            disease_cnt[9] = Integer.parseInt(r.getString(2));
                        }
                    }

                    System.out.println(disease_cnt[0]);
                    Map<String,Object> params = new LinkedHashMap<>();
                    params.put("LOCATION",locality );
                    params.put("S_D", String.valueOf(d.getDate()));
                    params.put("S_M", String.valueOf(d.getMonth() + 1));
                    params.put("MALARIA", String.valueOf(disease_cnt[0]));
                    params.put("DENGUE", String.valueOf(disease_cnt[1]));
                    params.put("CHICKENGUNIA", String.valueOf(disease_cnt[2]));
                    params.put("VIRAL_FEVER", String.valueOf(disease_cnt[3]));
                    params.put("FLU", String.valueOf(disease_cnt[4]));
                    params.put("TUBERCULOSIS", String.valueOf(disease_cnt[5]));
                    params.put("DIARROHEA", String.valueOf(disease_cnt[6]));
                    params.put("TYPHOID", String.valueOf(disease_cnt[7]));
                    params.put("CHOLERA", String.valueOf(disease_cnt[8]));
                    params.put("JAUNDICE", String.valueOf(disease_cnt[9]));

                    URL url = new URL(DOMAIN);                            
                    StringBuilder postData = new StringBuilder();
                    for (Map.Entry<String,Object> param : params.entrySet()) {
                        if (postData.length() != 0) postData.append('&');
                        postData.append(URLEncoder.encode(param.getKey(), "UTF-8"));
                        postData.append('=');
                        postData.append(URLEncoder.encode(String.valueOf(param.getValue()), "UTF-8"));
                    }
                    byte[] postDataBytes = postData.toString().getBytes("UTF-8");

                    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
                    connection.setRequestMethod("POST");
                    connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
                    connection.setRequestProperty("Content-Length", String.valueOf(postDataBytes.length));
                    connection.setDoOutput(true);
                    connection.getOutputStream().write(postDataBytes);

                    Reader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));

                    for (int c; (c = in.read()) >= 0;)
                        System.out.print((char)c);

                    }
                    catch (SQLException ex) {
                        // handle any errors
                        System.out.println("SQLException: " + ex.getMessage());
                        System.out.println("SQLState: " + ex.getSQLState());
                        System.out.println("VendorError: " + ex.getErrorCode());
                    }
                    catch(Exception e){
                        e.printStackTrace();
                    }
                break;

            }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainEditor().setVisible(true);               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnset;
    private javax.swing.JComboBox cmbdbserver;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtdbname;
    private javax.swing.JTextField txtdbport;
    private javax.swing.JTextField txthospital;
    private javax.swing.JTextField txtip;
    private javax.swing.JTextField txtloc;
    private javax.swing.JTextField txtpass;
    private javax.swing.JTextField txtusrid;
    // End of variables declaration//GEN-END:variables
}
